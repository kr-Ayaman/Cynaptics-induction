# -*- coding: utf-8 -*-
"""aaaaaa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cagI3Q5dczY24bBNVoHzh7MO4F2snNda
"""

import torch
from torch import nn
from tqdm.auto import tqdm
from torch.autograd import grad
import torch.nn.functional as F
from torchvision import transforms
from torchvision.utils import make_grid
from torchvision import datasets
from torch.utils.data import DataLoader
import os
import matplotlib.pyplot as plt
from tqdm.auto import tqdm
torch.manual_seed(0)

def show_tensor_images(image_tensor, num_images=25, size=(3, 64, 64), nrow=5):
    image_tensor = (image_tensor + 1) / 2
    image_unflat = image_tensor.detach().cpu()
    image_grid = make_grid(image_unflat[:num_images], nrow=nrow)
    plt.imshow(image_grid.permute(1, 2, 0).squeeze())
    plt.show()

display_step = 500
z_dim = 64
img_channels = 3
img_size = 256
batch_size = 128
lr = 0.0002
lambda_gp = 10
beta_1 = 0.5
beta_2 = 0.999
epochs = 100
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
save_dir = "saved_models"
os.makedirs(save_dir, exist_ok=True)

def get_noise(n_samples, z_dim, device='cpu'):
    return torch.randn(n_samples, z_dim, device=device)

class Generator(nn.Module):
    def __init__(self, z_dim):
        super().__init__()
        self.z_dim=z_dim
        self.model = nn.Sequential(
            nn.ConvTranspose2d(z_dim, 1024, 4, 1, 0),
            nn.BatchNorm2d(1024),
            nn.ReLU(True),
            nn.ConvTranspose2d(1024, 512, 4, 2, 1),
            nn.BatchNorm2d(512),
            nn.ReLU(True),
            nn.ConvTranspose2d(512, 256, 4, 2, 1),
            nn.BatchNorm2d(256),
            nn.ReLU(True),
            nn.ConvTranspose2d(256, 128, 4, 2, 1),
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            nn.ConvTranspose2d(128, 64, 4, 2, 1),
            nn.BatchNorm2d(64),
            nn.ReLU(True),
            nn.ConvTranspose2d(64, img_channels, 4, 4, 0),
            nn.Tanh()
        )

    def unsqueeze_noise(self, noise):
        return noise.view(len(noise), self.z_dim, 1, 1)

    def forward(self, noise):
        x = self.unsqueeze_noise(noise)
        return self.model(x)

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.model = nn.Sequential(
            nn.Conv2d(img_channels, 64, 4, 4, 0),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(64, 128, 4, 2, 1),
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(128, 256, 4, 2, 1),
            nn.BatchNorm2d(256),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(256, 512, 4, 2, 1),
            nn.BatchNorm2d(512),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(512, 1024, 4, 2, 1),
            nn.BatchNorm2d(1024),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(1024, 1, 4, 1, 0),
        )

    def forward(self, x):
        return self.model(x).view(-1, 1).squeeze(1)

gen = nn.DataParallel(Generator(z_dim).to(device))
disc = nn.DataParallel(Discriminator().to(device))
gen_opt = torch.optim.Adam(gen.parameters(), lr=lr, betas=(beta_1, beta_2))
disc_opt = torch.optim.Adam(disc.parameters(), lr=lr, betas=(beta_1, beta_2))
criterion = nn.BCEWithLogitsLoss()
def weights_init(m):
    if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):
        torch.nn.init.normal_(m.weight, 0.0, 0.02)
    if isinstance(m, nn.BatchNorm2d):
        torch.nn.init.normal_(m.weight, 0.0, 0.02)
        torch.nn.init.constant_(m.bias, 0)
gen = gen.apply(weights_init)
disc = disc.apply(weights_init)
transform = transforms.Compose([
    transforms.Resize((img_size, img_size)),
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])
])

def gradient_penalty(critic, real, fake, device):
    batch_size = real.shape[0]
    epsilon = torch.rand(batch_size, 1, 1, 1, device=device, requires_grad=True)
    mixed_images = epsilon * real + (1 - epsilon) * fake

    mixed_scores = critic(mixed_images)

    gradient = grad(
        outputs=mixed_scores,
        inputs=mixed_images,
        grad_outputs = torch.ones_like(mixed_scores),
        create_graph=True,
        retain_graph=True
    )[0]

    gradient = gradient.view(gradient.shape[0], -1)
    gradient_norm = gradient.norm(2, dim=1)
    penalty = ((gradient_norm - 1)**2).mean()

    return penalty

dataset = datasets.ImageFolder(root='/kaggle/input/minecraft-screenshots-dataset-with-features/screenshots', transform=transform)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, num_workers=4, pin_memory=True, persistent_workers=True)

show_tensor_images(gen(get_noise(25, z_dim, device=device)))

n_epochs = 100
gen_loop = 5
cur_step = 0
mean_generator_loss = 0
mean_discriminator_loss = 0
for epoch in range(n_epochs):
    for real, _ in tqdm(dataloader):
        cur_batch_size = len(real)
        real = real.to(device)

        disc_opt.zero_grad()
        fake_noise = get_noise(cur_batch_size, z_dim, device=device)
        fake = gen(fake_noise)
        disc_fake_pred = disc(fake.detach()).mean()
        disc_real_pred = disc(real).mean()
        gp = gradient_penalty(disc, real, fake, device)

        disc_loss = -(disc_real_pred - disc_fake_pred) + lambda_gp * gp
        mean_discriminator_loss += disc_loss.item() / display_step
        disc_loss.backward()
        disc_opt.step()
        gen_loss_track = 0
        gen_opt.zero_grad()
        fake_noise_2 = get_noise(cur_batch_size, z_dim, device=device)
        fake_2 = gen(fake_noise_2)
        disc_fake_pred = disc(fake_2).mean()
        gen_loss = -disc_fake_pred
        gen_loss_track += gen_loss
        gen_loss.backward()
        gen_opt.step()

        mean_generator_loss += gen_loss_track.item() / (display_step*gen_loop)

        if cur_step % display_step == 0 and cur_step > 0:
            print(f"Epoch {epoch}, step {cur_step}: Generator loss: {mean_generator_loss}, discriminator loss: {mean_discriminator_loss}")
            show_tensor_images(fake)
            show_tensor_images(real)
            mean_generator_loss = 0
            mean_discriminator_loss = 0
            torch.cuda.empty_cache()
        cur_step += 1
        del fake, fake_2, disc_fake_pred, disc_real_pred, gp, disc_loss, gen_loss
        if (epoch + 1) % 50 == 0:
            torch.save(gen.state_dict(), os.path.join(save_dir, f"generator_epoch_{epoch + 1}.pth"))
            torch.save(disc.state_dict(), os.path.join(save_dir, f"discriminator_epoch_{epoch + 1}.pth"))

torch.save(gen.state_dict(), os.path.join(save_dir, f"generator_eoch_{epoch + 1}.pth"))
torch.save(disc.state_dict(), os.path.join(save_dir, f"discriminator_eoch_{epoch + 1}.pth"))

